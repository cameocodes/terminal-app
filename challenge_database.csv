TOPICS, CODE
1, You are working at a bar where you have a current backlog of drinks to make. 3 party parrot cocktails* 2 party parrot waters and 6 party parrot beers. Write a program that asks the customer for their order. If they order a party parrot cocktail* add one to the number of party parrot cocktails you need to make* If they order a party parrot water* add one to the number of party parrot waters you need to make* If they order a party parrot beer* add one to the number of party parrot beers you need to pour. Print the final drinks order so you know what to make
1, Make an infinite loop and have it print &I’m stuck!&. Kill the loop (google it if needed). Make the loop end after 20 iterations in any way (with code).
1, Give the user a list of options: 1. Add dish* 2. Delete dish* 3. View selected dishes* p. Pay* and x. Exit. In your Ruby file* run a while loop that presents these options* gets input from a user (as a number)* and then acts on this input. For example* if the user selects 1* you will add a dish* and so you will take further input from the user and add that into an array. Do a similar job for the rest of the options with the appropriate inputs from the user* or the appropriate output. 
2, Write a program that asks the user for input that requests the user to input a number representing a temperature. If the number entered is above 30* reply to them &It’s too HOT!& or similar. Give appropriate responses for the temperatures between 20 and 30* 10 and 20* 0 and 10* and below zero.
2, Define a well-named method that takes one argument and returns ‘true’ if that argument is even* and false if the argument is an odd number. Define a method ‘div_or_mult_two’ which takes a number as an argument. Using your first defined method* if the number is even this method returns the result of that number divided by 2. If the number is odd it returns the result of that number multiplied by 2. Store the result of a call to this method in a variable.
2, Write a method that takes one argument* a number* and that returns true if the number is divisible by three* and false otherwise. Write another method that takes an array (of numbers) as an argument. This method will return two arrays* in one array (an array of arrays)* the first array containing the numbers that are divisible by 3* and the other of the rest of the numbers. use the first function to achieve this. For example* if you pass the second number [9* 4* 3* 5* 30* 2* 8] it would return [[9* 3* 30]*[4* 5* 2* 8]].
3, There is an odd employee at The Company who needs some code written that will provide them with the first 100 numbers of the Fibonacci sequence.
3, The Company originally started in Melbourne with a product list that consisted of the following sku numbers: &112334&* &276834&* &098464&* &356498&* &065134&* &124589&* &132548&* &102334&* &278834&* &078464&* &356298&* &085134&* &134589&* &132598&* &152334&* &876834&* &088464&* &336498&* &005134&* &124580&* &132588&* &102333&* &268834&* &098464&* &956298&* &081134&* &134889&* &132698& They then expanded to Brisbane* and while Brisbane began with mostly the same product sku list (some items they stopped stocking because they didn’t sell so well)* they also had some extras and ended up with the following list: &132588&* &102333&* &268834&* &098464&* &956698&* &081134&* &134889&* &132698&* &112334&* &276834&* &098464&* &356498&* &065134&* &132548&* &102334&* &278834&* &078464&* &356298&* &005134&* &134589&* &132598&*  &876834&* &088464&* &336498&* &005134&* &124588&. Head office want a complete sku list with no duplicates. Easy to do right? Now try working it out with three lines of code* you should be able to do it with 6 words and some operators and syntax. The Company is currently wanting to produce another 500 units of product sku 276834* (which is a lamp with a circular base). Unfortunately* a staff member forgot to order the plywood for the base and didn’t account for the cost of this. Plywood can be purchased in 1200 X 2400 mm sheets at a cost of $28.47 per sheet. Each lamp base is a circle with a diameter of 320mm. What is the total cost of ordering the plywood for the bases* and how much plywood is wasted?
3, Use the Ruby inbuilt pseudorandom to create an array of 100 random numbers. Sum the array without using the inbuilt sum method. Sum the array using the inbuilt sum method. Find the average of this array
3, Write function that translates a text to Pig Latin and back. English is translated to Pig Latin by taking the first letter of every word* moving it to the end of the word and adding ‘ay’. &The quick brown fox& becomes &Hetay uickqay rownbay oxfay&.
4, Define 4 methods. The first takes a string (as an argument)* and then returns the string + & will be&* the second takes a string* and returns the string + & won’t be&* the third takes a string and returns the string + & impeached.& and the fourth is called trump_predictor. trump_predictor takes a string* but then you must use the previous functions to get from this method call trump_predictor(&Trump&) to whatever outcome you think is more likely* but using only the previously defined functions. Store the output of trump_predictor in a well named variable. (For example* if you think he won’t be impeached* only call the methods that matter* so the output string will be &Trump won’t be impeached.&.) 
4, Define a method that takes an array of numbers* and returns the total of the addition of all the numbers in the array. Store the result of a call to this method in a well-named variable.
4, Write a method that takes a number that represents Fahrenheit* and returns a number equivalent to it’s value in Celsius. Write a second method that takes an array of numbers in Fahrenheit* and that returns that an array with the numbers in celsius using your first function to make the calculation. In this instance* try to do this without forming a temporary array. (Hint: use a variation on the .each loop.)
4, Define a method that takes a number of feet* and returns a number representing the total inches* and another that takes a number representing inches and returns the number of centimetres. Define and call a third function called feet_to_cm that takes a number of feet and returns the number of centimetres* but that uses only our previous two functions. Store that number in a well-named variable.
4, Your shop sells bespoke solid wood right-angled-triangular tables (because you are a hipster). The client is charged for the volume of the table. Write a function that takes two arguments* and works out the area of the triangle. Write a second function that takes two arguments* one representing the area of the top of the table* and the other representing the height (from the ground) and returns the volume. Write a third method that performs no calculations* but takes three arguments and uses the previous two methods to return the volume of the table. Store that volume in a well-named variable.
5, A business called &The Company& created a new phone called the companyPhone that needs packing to send away for sale. The Company needs to know how many phones in their pretty new packaging (rectangular prisms) that measures: with  width 5cm* length 8cm* and depth 4cm we can fit into a box that is 32cm wide*  40cm long and 20cm high.   (think about writing some pseudo code first that steps through all the commands you need to write.)- keep it simple: just think about calculating a volume for each rectangular prism and seeing how many of the smaller one fit in the larger one….. make sure your answer rounds down and not up!
